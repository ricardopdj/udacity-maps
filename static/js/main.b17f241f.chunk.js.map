{"version":3,"sources":["Map.js","Sidebar.js","FoursquareAPI.js","App.js","serviceWorker.js","index.js"],"names":["google","window","Map","state","mapLoaded","this","googleMapsPromise","Promise","resolve","resolveGoogleMapsPromise","script","document","createElement","src","concat","async","body","appendChild","getGoogleMaps","_this2","then","createMap","map","maps","getElementById","zoom","center","lat","lng","props","onCreate","react_default","a","id","className","role","aria-label","Component","Sidebar","updateQuery","query","_this","onSearch","getInfo","venue","onGetInfo","venues","InputGroup","lib","time","handler","Input","placeholder","onChange","event","target","value","ListGroup","length","index","ListGroupItem","tag","key","onClick","name","params","fetchUrl","getPhoto","venueId","fetch","res","json","data","response","photos","items","prefix","suffix","catch","err","console","log","App","apiError","visibleVenues","infoWindow","bounds","markers","setMap","setState","InfoWindow","LatLngBounds","createMarkers","marker","Marker","position","location","addListener","fitBounds","match","RegExp","escapeRegExp","filter","test","close","setVisible","photo","openInfo","FoursquareAPI","infoContent","address","setContent","find","open","panTo","getPosition","setAnimation","Animation","DROP","extend","groups","item","Container","fluid","Row","Col","xs","lg","src_Sidebar","src_Map","href","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b17f241f.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst google = window.google;\r\n\r\nclass Map extends Component {\r\n    static propTypes = {\r\n        venues: PropTypes.array.isRequired,\r\n        onCreate: PropTypes.func.isRequired\r\n    }\r\n\r\n    state = {\r\n        mapLoaded: false,\r\n    }\r\n\r\n    getGoogleMaps() {\r\n        // If we haven't already defined the promise, define it\r\n        if (!this.googleMapsPromise) {\r\n            this.googleMapsPromise = new Promise((resolve) => {\r\n                // Add a global handler for when the API finishes loading\r\n                window.resolveGoogleMapsPromise = () => {\r\n                    // Resolve the promise\r\n                    resolve(google);\r\n\r\n                    // Tidy up\r\n                    delete window.resolveGoogleMapsPromise;\r\n                };\r\n\r\n                // Load the Google Maps API\r\n                const API = 'AIzaSyC0FRwnvyqQbxEaU8JOuCojITxhb3bxdCQ';\r\n                const script = document.createElement(\"script\");\r\n                script.src = `https://maps.googleapis.com/maps/api/js?key=${API}&callback=resolveGoogleMapsPromise`;\r\n                script.async = true;\r\n                document.body.appendChild(script);\r\n            });\r\n        }\r\n\r\n        // Return a promise for the Google Maps API\r\n        return this.googleMapsPromise;\r\n    }\r\n\r\n    componentWillMount() {\r\n        // Start Google Maps API loading since we know we'll soon need it\r\n        this.getGoogleMaps();\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Once the Google Maps API has finished loading, initialize the map\r\n        this.getGoogleMaps().then((google) => {\r\n            this.createMap();\r\n        });\r\n    }\r\n\r\n    createMap() {\r\n        const map = new window.google.maps.Map(\r\n            document.getElementById('map'),\r\n            {\r\n                zoom: 15,\r\n                center: { lat: -30.0331, lng: -51.2300 }\r\n            }\r\n        );\r\n        this.props.onCreate(map)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"map\" className=\"h-100\" role=\"application\" aria-label=\"Neighborhood Map\">\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Map","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Debounce } from 'react-throttle';\r\nimport {\r\n        InputGroup,\r\n        Input,\r\n        ListGroup,\r\n        ListGroupItem\r\n    } from 'reactstrap';\r\n\r\nclass Sidebar extends Component {\r\n    static propTypes = {\r\n        venues: PropTypes.array.isRequired,\r\n        onSearch: PropTypes.func.isRequired,\r\n        onGetInfo: PropTypes.func.isRequired\r\n    }\r\n\r\n    updateQuery = (query) => {\r\n        this.props.onSearch(query);\r\n    }\r\n\r\n    getInfo = (venue) => {\r\n        this.props.onGetInfo(venue);\r\n    }\r\n\r\n    render() {\r\n        const { venues} = this.props\r\n\r\n        return (\r\n            <aside className=\"py-2\">\r\n                <h1>Porto Alegre Sights</h1>\r\n                <InputGroup className=\"my-4\">\r\n                    <Debounce time=\"400\" handler=\"onChange\">\r\n                        <Input placeholder=\"Filter locations\" aria-label=\"Type a venue name to filter\" onChange={(event) => this.updateQuery(event.target.value)}/>\r\n                    </Debounce>\r\n                </InputGroup>\r\n                <ListGroup>\r\n                    {\r\n                        venues.length > 0 &&\r\n                        venues.map((venue, index) =>\r\n                            <ListGroupItem tag=\"button\" key={index} onClick={() => this.getInfo(venue)}>{venue.name}</ListGroupItem>\r\n                        )\r\n                    }\r\n                </ListGroup>\r\n            </aside>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sidebar","const api = \"https://api.foursquare.com/v2/venues/explore\";\r\nconst clientId = 'PNOZ54G0GD1T1N4MKUX2CXIRA3BF34R3BAKVZPRHX40GBYLK';\r\nconst clientSecret = 'H0LKKTR4QAXQEL2V42D123TKQ31CZQE0LULYNLLNZEBIJTBS'\r\nconst limit = 10;\r\nconst ll = '-30.0346471, -51.2176584';\r\nconst section = 'sights';\r\n\r\nconst params = `?client_id=${clientId}&client_secret=${clientSecret}&v=20180323&limit=${limit}&ll=${ll}&section=${section}`;\r\nconst fetchUrl = `${api}${params}`;\r\n\r\nexport const getAll = () => fetch(fetchUrl)\r\n    .then(res => res.json())\r\n    .then(data => data.response.groups[0].items)\r\n    .then(res => res.map(item => item.venue))\r\n    .catch(err => { throw err });\r\n\r\n\r\n    export const getPhoto = (venueId) => fetch(`https://api.foursquare.com/v2/venues/${venueId}/photos${params}`)\r\n    .then(res => res.json())\r\n    .then(data => data.response.photos.items[0])\r\n    .then(res => {\r\n        return `${res.prefix}cap200${res.suffix}`\r\n    })\r\n    .catch(err => console.log(\"Erro ao consultar a api do Foursquare\", err));\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {Container, Row, Col} from 'reactstrap';\r\nimport Map from './Map'\r\nimport Sidebar from './Sidebar'\r\nimport * as FoursquareAPI from './FoursquareAPI'\r\nimport escapeRegExp from 'escape-string-regexp'\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        apiError: false,\r\n        venues: [],\r\n        visibleVenues: [],\r\n        map: null,\r\n        infoWindow: null,\r\n        bounds: null,\r\n        markers: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        FoursquareAPI\r\n            .getAll()\r\n            .then((venues) => {\r\n                this.setState({\r\n                    venues: venues,\r\n                    visibleVenues: venues\r\n                });\r\n            })\r\n            .catch(() => { this.setState({apiError: true }) });\r\n    }\r\n\r\n    setMap = (map) => {\r\n        this.setState({\r\n            map: map,\r\n            infoWindow: new window.google.maps.InfoWindow(),\r\n            bounds: new window.google.maps.LatLngBounds()\r\n        });\r\n        const markers = this.createMarkers(map);\r\n        this.setState({markers})\r\n    }\r\n\r\n    createMarkers = (map) => {\r\n        return this.state.venues.map(venue => {\r\n            const marker = new window.google.maps.Marker({position: venue.location, map: map});\r\n            marker.id = venue.id\r\n            marker.name = venue.name\r\n            marker.addListener('click', () => this.getInfo(venue));\r\n            this.fitBounds(marker.position);\r\n            return marker;\r\n        })\r\n    }\r\n\r\n    updateQuery = (query) => {\r\n        const match = new RegExp(escapeRegExp(query), 'i');\r\n        this.setState({visibleVenues: this.state.venues.filter(venue => match.test(venue.name))})\r\n        { this.state.infoWindow && this.state.infoWindow.close() }\r\n\r\n        this.state.markers.map(marker => {\r\n            return marker.setVisible(match.test(marker.name));\r\n        })\r\n    }\r\n\r\n    getInfo = (venue) => {\r\n        if (!venue.photo) {\r\n            FoursquareAPI\r\n            .getPhoto(venue.id)\r\n                .then((photo) => {\r\n                    venue.photo = photo\r\n                    return venue\r\n                })\r\n                .then((venue) => this.openInfo(venue))\r\n                .catch(err => console.log(\"Erro ao consultar a api do Foursquare\", err));\r\n        } else {\r\n            this.openInfo(venue)\r\n        }\r\n    }\r\n\r\n    // Create and open InfoWindow of the selected venue/marker\r\n    openInfo = (venue) => {\r\n        let infoContent = `<h4>${venue.name}</h4><p>${venue.location.address}</p>`\r\n        if (venue.photo) {\r\n            infoContent = `${infoContent}<img src=\"${venue.photo}\" alt=\"${venue.name}\"/>`\r\n        }\r\n        this.state.infoWindow.setContent(infoContent);\r\n        const marker = this.state.markers.find(marker => marker.id === venue.id)\r\n        this.state.infoWindow.open(this.state.map, marker);\r\n        this.state.map.panTo(marker.getPosition());\r\n        marker.setAnimation(window.google.maps.Animation.DROP);\r\n    }\r\n\r\n    fitBounds = (position) => {\r\n        this.state.bounds.extend(position);\r\n        this.state.map.fitBounds(this.state.bounds);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid={true} className=\"h-100\">\r\n                { this.state.venues.length > 0 &&\r\n                <Row className=\"h-100\">\r\n                    <Col xs=\"12\" lg=\"4\">\r\n                        <Sidebar venues={this.state.visibleVenues} onSearch={this.updateQuery} onGetInfo={this.getInfo}/>\r\n                    </Col>\r\n                    <Col xs=\"12\" lg=\"8\">\r\n                        <Map onCreate={this.setMap} venues={this.state.visibleVenues}/>\r\n                    </Col>\r\n                </Row>\r\n                }\r\n\r\n                { this.state.venues.length > 0 &&\r\n                <Row>\r\n                    <Col xs=\"12\">\r\n                        <div className=\"text-center py-3\">\r\n                            Made with <a href=\"https://developer.foursquare.com\">Foursquare API</a> and <a href=\"https://cloud.google.com/maps-platform\">Google Maps API</a>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                }\r\n\r\n                { !this.state.venues.length && !this.state.apiError &&\r\n                    <Row className=\"h-100 align-items-center\">\r\n                        <Col xs=\"12\">\r\n                            <div className=\"text-center py-3\">\r\n                                <span className=\"align-middle\">Loading some Porto Alegre sights! Wait...</span>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                }\r\n\r\n                { this.state.apiError &&\r\n                    <Row className=\"h-100 align-items-center\">\r\n                        <Col xs=\"12\">\r\n                            <div className=\"text-center py-3\">\r\n                                <span className=\"align-middle\">Sorry! Something wrong happen, please try later :(</span>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                }\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}