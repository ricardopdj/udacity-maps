{"version":3,"sources":["logo.svg","Marker.js","Map.js","Sidebar.js","FoursquareAPI.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Component","google","window","Map","state","mapLoaded","this","googleMapsPromise","Promise","resolve","resolveGoogleMapsPromise","script","document","createElement","src","concat","async","body","appendChild","getGoogleMaps","_this2","then","createMap","map","maps","getElementById","zoom","center","lat","lng","props","onCreate","react_default","a","id","className","Sidebar","updateQuery","query","_this","onSearch","openInfo","venue","onOpenInfo","venues","InputGroup","lib","time","handler","Input","placeholder","onChange","event","target","value","ListGroup","length","index","ListGroupItem","tag","key","onClick","name","params","fetchUrl","getPhoto","venueId","fetch","res","json","data","response","photos","items","prefix","suffix","catch","err","console","log","App","visibleVenues","infoWindow","bounds","markers","FoursquareAPI","photo","setMap","setState","InfoWindow","LatLngBounds","createMarkers","marker","Marker","position","location","addListener","fitBounds","match","RegExp","escapeRegExp","filter","test","close","setVisible","img","x","setContent","address","find","open","panTo","getPosition","setAnimation","Animation","DROP","extend","groups","item","Container","fluid","Row","Col","xs","lg","src_Sidebar","src_Map","href","Boolean","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eaac93be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Marker extends Component {\r\n\r\n    componentDidMount = () => {\r\n        this.createMarker();\r\n    };\r\n\r\n    createMarker() {\r\n        const { venue, map } = this.props\r\n        const position = { lat: venue.location.lat, lng: venue.location.lng };\r\n\r\n        const marker = new window.google.maps.Marker({position: position, map: map});\r\n        marker.addListener('click', () => this.props.onClickMarker(marker, venue));\r\n        this.props.onCreate(marker.position);\r\n    }\r\n\r\n    render() {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default Marker","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Marker from './Marker'\r\nimport escapeRegExp from 'escape-string-regexp'\r\n\r\nconst google = window.google;\r\n\r\nclass Map extends Component {\r\n    state = {\r\n        mapLoaded: false,\r\n    }\r\n\r\n    getGoogleMaps() {\r\n        // If we haven't already defined the promise, define it\r\n        if (!this.googleMapsPromise) {\r\n            this.googleMapsPromise = new Promise((resolve) => {\r\n                // Add a global handler for when the API finishes loading\r\n                window.resolveGoogleMapsPromise = () => {\r\n                    // Resolve the promise\r\n                    resolve(google);\r\n\r\n                    // Tidy up\r\n                    delete window.resolveGoogleMapsPromise;\r\n                };\r\n\r\n                // Load the Google Maps API\r\n                const API = 'AIzaSyC0FRwnvyqQbxEaU8JOuCojITxhb3bxdCQ';\r\n                const script = document.createElement(\"script\");\r\n                script.src = `https://maps.googleapis.com/maps/api/js?key=${API}&callback=resolveGoogleMapsPromise`;\r\n                script.async = true;\r\n                document.body.appendChild(script);\r\n            });\r\n        }\r\n\r\n        // Return a promise for the Google Maps API\r\n        return this.googleMapsPromise;\r\n    }\r\n\r\n    componentWillMount() {\r\n        // Start Google Maps API loading since we know we'll soon need it\r\n        this.getGoogleMaps();\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Once the Google Maps API has finished loading, initialize the map\r\n        this.getGoogleMaps().then((google) => {\r\n            this.createMap();\r\n        });\r\n    }\r\n\r\n    createMap() {\r\n        const map = new window.google.maps.Map(\r\n            document.getElementById('map'),\r\n            {\r\n                zoom: 15,\r\n                center: { lat: -30.0331, lng: -51.2300 }\r\n            }\r\n        );\r\n        this.props.onCreate(map)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"map\" className=\"h-100\">\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Map","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Debounce } from 'react-throttle';\r\nimport escapeRegExp from 'escape-string-regexp'\r\nimport {\r\n        InputGroup,\r\n        InputGroupAddon,\r\n        Button,\r\n        Input,\r\n        ListGroup,\r\n        ListGroupItem\r\n    } from 'reactstrap';\r\n\r\nclass Sidebar extends Component {\r\n\r\n    updateQuery = (query) => {\r\n        this.props.onSearch(query);\r\n    }\r\n\r\n    openInfo = (venue) => {\r\n        this.props.onOpenInfo(venue);\r\n    }\r\n\r\n    render() {\r\n        const { venues} = this.props\r\n\r\n        return (\r\n            <aside className=\"py-2\">\r\n                <h1>Porto Alegre Sights</h1>\r\n                <InputGroup className=\"my-4\">\r\n                    <Debounce time=\"400\" handler=\"onChange\">\r\n                        <Input placeholder=\"Filtrar\" onChange={(event) => this.updateQuery(event.target.value)}/>\r\n                    </Debounce>\r\n                </InputGroup>\r\n                <ListGroup>\r\n                    {\r\n                        venues.length > 0 &&\r\n                        venues.map((venue, index) =>\r\n                            <ListGroupItem tag=\"button\" key={index} onClick={() => this.openInfo(venue)}>{venue.name}</ListGroupItem>\r\n                        )\r\n                    }\r\n                </ListGroup>\r\n            </aside>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sidebar","const api = \"https://api.foursquare.com/v2/venues/explore\";\r\nconst clientId = 'PNOZ54G0GD1T1N4MKUX2CXIRA3BF34R3BAKVZPRHX40GBYLK';\r\nconst clientSecret = 'H0LKKTR4QAXQEL2V42D123TKQ31CZQE0LULYNLLNZEBIJTBS'\r\nconst limit = 10;\r\nconst ll = '-30.0346471, -51.2176584';\r\nconst section = 'sights';\r\n\r\nconst params = `?client_id=${clientId}&client_secret=${clientSecret}&v=20180323&limit=${limit}&ll=${ll}&section=${section}`;\r\nconst fetchUrl = `${api}${params}`;\r\n\r\nexport const getAll = () => fetch(fetchUrl)\r\n    .then(res => res.json())\r\n    .then(data => data.response.groups[0].items)\r\n    .then(res => res.map(item => item.venue))\r\n    .catch(err => console.log(\"Erro ao consultar a api do Foursquare\", err));\r\n\r\n\r\nexport const getPhoto = (venueId) => fetch(`https://api.foursquare.com/v2/venues/${venueId}/photos${params}`)\r\n    .then(res => res.json())\r\n    .then(data => data.response.photos.items[0])\r\n    .then(res => {\r\n        return `${res.prefix}/height100/${res.suffix}`\r\n    })\r\n    .catch(err => console.log(\"Erro ao consultar a api do Foursquare\", err));\r\n","import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {Container, Row, Col, InputGroup, InputGroupAddon, Button, Input } from 'reactstrap';\r\nimport PropTypes from 'prop-types'\r\nimport Map from './Map'\r\nimport Sidebar from './Sidebar'\r\nimport * as FoursquareAPI from './FoursquareAPI'\r\nimport escapeRegExp from 'escape-string-regexp'\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        venues: [],\r\n        visibleVenues: [],\r\n        map: null,\r\n        infoWindow: null,\r\n        bounds: null,\r\n        markers: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        FoursquareAPI\r\n            .getAll()\r\n            .then((venues) => {\r\n                this.setState({\r\n                    venues: venues,\r\n                    visibleVenues: venues\r\n                });\r\n                console.log(\"venues loaded\", venues);\r\n            })\r\n    }\r\n\r\n    getPhoto = (venueId) => {\r\n        FoursquareAPI\r\n            .getPhoto(venueId)\r\n            .then((photo) => {\r\n                console.log(photo);\r\n\r\n                return photo\r\n            })\r\n    }\r\n\r\n    setMap = (map) => {\r\n        console.log(\"map created\");\r\n        this.setState({\r\n            map: map,\r\n            infoWindow: new window.google.maps.InfoWindow(),\r\n            bounds: new window.google.maps.LatLngBounds()\r\n        });\r\n        const markers = this.createMarkers(map);\r\n        this.setState({markers})\r\n    }\r\n\r\n    createMarkers = (map) => {\r\n        return this.state.venues.map(venue => {\r\n            const marker = new window.google.maps.Marker({position: venue.location, map: map});\r\n            marker.id = venue.id\r\n            marker.name = venue.name\r\n            marker.addListener('click', () => this.openInfo(venue));\r\n            this.fitBounds(marker.position);\r\n            return marker;\r\n        })\r\n    }\r\n\r\n    updateQuery = (query) => {\r\n        const match = new RegExp(escapeRegExp(query), 'i');\r\n        this.setState({visibleVenues: this.state.venues.filter(venue => match.test(venue.name))})\r\n        { this.state.infoWindow && this.state.infoWindow.close() }\r\n\r\n        this.state.markers.map(marker => {\r\n            marker.setVisible(match.test(marker.name));\r\n        })\r\n    }\r\n\r\n    openInfo = (venue) => {\r\n        if (!venue.img) {\r\n            let x = this.getPhoto(venue.id);\r\n            console.log(x);\r\n\r\n            // venue.img = 'teste';\r\n        }\r\n\r\n\r\n        this.state.infoWindow.setContent(`<h4>${venue.name}</h4><p>${venue.location.address}</p>`);\r\n        const marker = this.state.markers.find(marker => marker.id == venue.id)\r\n        this.state.infoWindow.open(this.state.map, marker);\r\n        this.state.map.panTo(marker.getPosition());\r\n        marker.setAnimation(window.google.maps.Animation.DROP);\r\n    }\r\n\r\n    fitBounds = (position) => {\r\n        this.state.bounds.extend(position);\r\n        this.state.map.fitBounds(this.state.bounds);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid={true} className=\"h-100\">\r\n                { this.state.venues.length > 0 &&\r\n                <Row className=\"h-100\">\r\n                    <Col xs=\"12\" lg=\"4\">\r\n                        <Sidebar venues={this.state.visibleVenues} onSearch={this.updateQuery} onOpenInfo={this.openInfo}/>\r\n                    </Col>\r\n                    <Col xs=\"12\" lg=\"8\">\r\n                        <Map onCreate={this.setMap} venues={this.state.visibleVenues} query={this.state.query}/>\r\n                    </Col>\r\n                </Row>\r\n                }\r\n\r\n                { this.state.venues.length > 0 &&\r\n                <Row>\r\n                    <Col>\r\n                        <div className=\"text-center py-3\">\r\n                            Made with <a href=\"https://developer.foursquare.com\">Foursquare API</a> and <a href=\"https://cloud.google.com/maps-platform\">Google Maps API</a>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                }\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}