{"version":3,"sources":["logo.svg","Marker.js","Map.js","Sidebar.js","FoursquareAPI.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Component","google","window","Map","state","mapLoaded","this","googleMapsPromise","Promise","resolve","resolveGoogleMapsPromise","script","document","createElement","src","concat","async","body","appendChild","getGoogleMaps","_this2","then","createMap","map","maps","getElementById","zoom","center","lat","lng","props","onCreate","react_default","a","id","className","Sidebar","updateQuery","query","_this","onSearch","openInfo","venue","onOpenInfo","venues","InputGroup","lib","time","handler","Input","placeholder","onChange","event","target","value","ListGroup","length","index","ListGroupItem","tag","key","onClick","name","fetchUrl","App","visibleVenues","infoWindow","bounds","markers","setMap","console","log","setState","InfoWindow","LatLngBounds","createMarkers","marker","Marker","position","location","addListener","fitBounds","match","RegExp","escapeRegExp","filter","test","close","setVisible","setContent","address","find","open","panTo","getPosition","extend","fetch","res","json","data","response","groups","items","item","catch","err","Container","fluid","Row","Col","xs","md","src_Sidebar","src_Map","Boolean","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7ebb662.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Marker extends Component {\r\n\r\n    componentDidMount = () => {\r\n        this.createMarker();\r\n    };\r\n\r\n    createMarker() {\r\n        const { venue, map } = this.props\r\n        const position = { lat: venue.location.lat, lng: venue.location.lng };\r\n\r\n        const marker = new window.google.maps.Marker({position: position, map: map});\r\n        marker.addListener('click', () => this.props.onClickMarker(marker, venue));\r\n        this.props.onCreate(marker.position);\r\n    }\r\n\r\n    render() {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default Marker","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Marker from './Marker'\r\nimport escapeRegExp from 'escape-string-regexp'\r\n\r\nconst google = window.google;\r\n\r\nclass Map extends Component {\r\n    state = {\r\n        mapLoaded: false,\r\n    }\r\n\r\n    getGoogleMaps() {\r\n        // If we haven't already defined the promise, define it\r\n        if (!this.googleMapsPromise) {\r\n            this.googleMapsPromise = new Promise((resolve) => {\r\n                // Add a global handler for when the API finishes loading\r\n                window.resolveGoogleMapsPromise = () => {\r\n                    // Resolve the promise\r\n                    resolve(google);\r\n\r\n                    // Tidy up\r\n                    delete window.resolveGoogleMapsPromise;\r\n                };\r\n\r\n                // Load the Google Maps API\r\n                const API = 'AIzaSyC0FRwnvyqQbxEaU8JOuCojITxhb3bxdCQ';\r\n                const script = document.createElement(\"script\");\r\n                script.src = `https://maps.googleapis.com/maps/api/js?key=${API}&callback=resolveGoogleMapsPromise`;\r\n                script.async = true;\r\n                document.body.appendChild(script);\r\n            });\r\n        }\r\n\r\n        // Return a promise for the Google Maps API\r\n        return this.googleMapsPromise;\r\n    }\r\n\r\n    componentWillMount() {\r\n        // Start Google Maps API loading since we know we'll soon need it\r\n        this.getGoogleMaps();\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Once the Google Maps API has finished loading, initialize the map\r\n        this.getGoogleMaps().then((google) => {\r\n            this.createMap();\r\n        });\r\n    }\r\n\r\n    createMap() {\r\n        const map = new window.google.maps.Map(\r\n            document.getElementById('map'),\r\n            {\r\n                zoom: 15,\r\n                center: { lat: -30.0331, lng: -51.2300 }\r\n            }\r\n        );\r\n        this.props.onCreate(map)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"map\" className=\"h-100\">\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Map","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Debounce } from 'react-throttle';\r\nimport escapeRegExp from 'escape-string-regexp'\r\nimport {\r\n        InputGroup,\r\n        InputGroupAddon,\r\n        Button,\r\n        Input,\r\n        ListGroup,\r\n        ListGroupItem\r\n    } from 'reactstrap';\r\n\r\nclass Sidebar extends Component {\r\n\r\n    updateQuery = (query) => {\r\n        this.props.onSearch(query);\r\n    }\r\n\r\n    openInfo = (venue) => {\r\n        this.props.onOpenInfo(venue);\r\n    }\r\n\r\n    render() {\r\n        const { venues} = this.props\r\n\r\n        return (\r\n            <aside className=\"py-2\">\r\n                <h1>Porto Alegre Sights</h1>\r\n                <InputGroup className=\"my-4\">\r\n                    <Debounce time=\"400\" handler=\"onChange\">\r\n                        <Input placeholder=\"Filtrar\" onChange={(event) => this.updateQuery(event.target.value)}/>\r\n                    </Debounce>\r\n                </InputGroup>\r\n                <ListGroup>\r\n                    {\r\n                        venues.length > 0 &&\r\n                        venues.map((venue, index) =>\r\n                            <ListGroupItem tag=\"button\" key={index} onClick={() => this.openInfo(venue)}>{venue.name}</ListGroupItem>\r\n                        )\r\n                    }\r\n                </ListGroup>\r\n            </aside>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sidebar","const api = \"https://api.foursquare.com/v2/venues/explore?\";\r\nconst clientId = 'PNOZ54G0GD1T1N4MKUX2CXIRA3BF34R3BAKVZPRHX40GBYLK';\r\nconst clientSecret = 'H0LKKTR4QAXQEL2V42D123TKQ31CZQE0LULYNLLNZEBIJTBS'\r\nconst limit = 5;\r\nconst ll = '-30.0346471, -51.2176584';\r\nconst section = 'sights';\r\n\r\nconst fetchUrl = `${api}client_id=${clientId}&client_secret=${clientSecret}&v=20180323&limit=${limit}&ll=${ll}&section=${section}`;\r\n\r\nexport const getAll = () =>\r\n  fetch(fetchUrl)\r\n    .then(res => res.json())\r\n    .then(data => data.response.groups[0].items)\r\n    .then(res => {\r\n      const venues = res.map(item => item.venue);\r\n      return venues;\r\n    })\r\n    .catch(err => console.log(\"Erro ao consultar a api do Foursquare\", err));\r\n\r\n","import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {Container, Row, Col, InputGroup, InputGroupAddon, Button, Input } from 'reactstrap';\r\nimport PropTypes from 'prop-types'\r\nimport Map from './Map'\r\nimport Sidebar from './Sidebar'\r\nimport * as FoursquareAPI from './FoursquareAPI'\r\nimport escapeRegExp from 'escape-string-regexp'\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        venues: [],\r\n        visibleVenues: [],\r\n        map: null,\r\n        infoWindow: null,\r\n        bounds: null,\r\n        markers: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        FoursquareAPI\r\n            .getAll()\r\n            .then((venues) => {\r\n                this.setState({\r\n                    venues: venues,\r\n                    visibleVenues: venues\r\n                });\r\n                console.log(\"venues loaded\");\r\n            })\r\n    }\r\n\r\n    setMap = (map) => {\r\n        console.log(\"map created\");\r\n        this.setState({\r\n            map: map,\r\n            infoWindow: new window.google.maps.InfoWindow(),\r\n            bounds: new window.google.maps.LatLngBounds()\r\n        });\r\n        const markers = this.createMarkers(map);\r\n        this.setState({markers})\r\n    }\r\n\r\n    createMarkers = (map) => {\r\n        return this.state.venues.map(venue => {\r\n            const marker = new window.google.maps.Marker({position: venue.location, map: map});\r\n            marker.id = venue.id\r\n            marker.name = venue.name\r\n            marker.addListener('click', () => this.openInfo(venue));\r\n            this.fitBounds(marker.position);\r\n            return marker;\r\n        })\r\n    }\r\n\r\n    updateQuery = (query) => {\r\n        const match = new RegExp(escapeRegExp(query), 'i');\r\n        this.setState({visibleVenues: this.state.venues.filter(venue => match.test(venue.name))})\r\n        if (this.state.infoWindow) {\r\n            this.state.infoWindow.close();\r\n        }\r\n\r\n        this.state.markers.map(marker => {\r\n            marker.setVisible(match.test(marker.name));\r\n        })\r\n    }\r\n\r\n    openInfo = (venue) => {\r\n        this.state.infoWindow.setContent(`<h4>${venue.name}</h4><p>${venue.location.address}</p>`);\r\n        const marker = this.state.markers.find(marker => marker.id == venue.id)\r\n        this.state.infoWindow.open(this.state.map, marker);\r\n        this.state.map.panTo(marker.getPosition());\r\n    }\r\n\r\n    fitBounds = (position) => {\r\n        this.state.bounds.extend(position);\r\n        this.state.map.fitBounds(this.state.bounds);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid={true} className=\"h-100\">\r\n                { this.state.venues.length > 0 &&\r\n                <Row className=\"h-100\">\r\n                    <Col xs=\"12\" md=\"4\">\r\n                        <Sidebar venues={this.state.visibleVenues} onSearch={this.updateQuery} onOpenInfo={this.openInfo}/>\r\n                    </Col>\r\n                    <Col xs=\"12\" md=\"8\">\r\n                        <Map onCreate={this.setMap} venues={this.state.visibleVenues} query={this.state.query}/>\r\n                    </Col>\r\n                </Row>\r\n                }\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}